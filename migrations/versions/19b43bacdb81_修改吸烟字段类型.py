"""修改吸烟字段类型

Revision ID: 19b43bacdb81
Revises: 
Create Date: 2020-12-14 16:36:57.628929

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '19b43bacdb81'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('patients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('case_number', sa.String(length=255), nullable=True),
    sa.Column('sex', sa.String(length=255), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_patients'))
    )
    with op.batch_alter_table('patients', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_patients_timestamp'), ['timestamp'], unique=False)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('default', sa.Boolean(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('slug', name=op.f('uq_roles_slug'))
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_default'), ['default'], unique=False)

    op.create_table('diseases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('collected_date', sa.DateTime(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('disease_type', sa.String(length=255), nullable=True),
    sa.Column('type', sa.String(length=255), nullable=True),
    sa.Column('tnm', sa.String(length=255), nullable=True),
    sa.Column('period', sa.String(length=255), nullable=True),
    sa.Column('pathological_immunohistochemistry', sa.String(length=255), nullable=True),
    sa.Column('operation_date', sa.DateTime(), nullable=True),
    sa.Column('pathological_information', sa.String(length=255), nullable=True),
    sa.Column('Typing', sa.String(length=255), nullable=True),
    sa.Column('hypertension', sa.String(length=255), nullable=True),
    sa.Column('diabetes', sa.String(length=255), nullable=True),
    sa.Column('history_of_cancer', sa.String(length=255), nullable=True),
    sa.Column('systemic_diseases', sa.String(length=255), nullable=True),
    sa.Column('family_history', sa.String(length=255), nullable=True),
    sa.Column('antiviral_therapy', sa.String(length=255), nullable=True),
    sa.Column('preoperative_tumor_treatment', sa.String(length=255), nullable=True),
    sa.Column('blood_lipids', sa.String(length=255), nullable=True),
    sa.Column('biochemical_indicators', sa.String(length=255), nullable=True),
    sa.Column('lymphocyte', sa.String(length=255), nullable=True),
    sa.Column('Neutrophils', sa.String(length=255), nullable=True),
    sa.Column('after_AEP', sa.String(length=255), nullable=True),
    sa.Column('after_CEA', sa.String(length=255), nullable=True),
    sa.Column('after_CA19_9', sa.String(length=255), nullable=True),
    sa.Column('HBV_DNA', sa.String(length=255), nullable=True),
    sa.Column('hepatitis_B_surface_antigen', sa.String(length=255), nullable=True),
    sa.Column('surface_antibody', sa.String(length=255), nullable=True),
    sa.Column('E_antigen', sa.String(length=255), nullable=True),
    sa.Column('E_antibody', sa.String(length=255), nullable=True),
    sa.Column('core_antibody', sa.String(length=255), nullable=True),
    sa.Column('smoking', sa.String(length=255), nullable=True),
    sa.Column('treatment', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.Column('patient_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name=op.f('fk_diseases_patient_id_patients')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_diseases'))
    )
    with op.batch_alter_table('diseases', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_diseases_timestamp'), ['timestamp'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.Column('location', sa.String(length=64), nullable=True),
    sa.Column('about_me', sa.Text(), nullable=True),
    sa.Column('member_since', sa.DateTime(), nullable=True),
    sa.Column('last_seen', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_users_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('sequence',
    sa.Column('sequence_id', sa.Integer(), nullable=False),
    sa.Column('batch', sa.String(length=255), nullable=True),
    sa.Column('id', sa.String(length=255), nullable=True),
    sa.Column('gao_lab_id', sa.String(length=255), nullable=True),
    sa.Column('introduction', sa.Text(), nullable=True),
    sa.Column('sample_origin', sa.String(length=255), nullable=True),
    sa.Column('collected_date', sa.DATE(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('disease_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_sequence_author_id_users')),
    sa.ForeignKeyConstraint(['disease_id'], ['diseases.id'], name=op.f('fk_sequence_disease_id_diseases')),
    sa.PrimaryKeyConstraint('sequence_id', name=op.f('pk_sequence'))
    )
    with op.batch_alter_table('sequence', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sequence_timestamp'), ['timestamp'], unique=False)

    op.create_table('results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name_1', sa.String(length=255), nullable=True),
    sa.Column('data_quality_input', sa.Float(), nullable=True),
    sa.Column('data_quality_bam', sa.Float(), nullable=True),
    sa.Column('data_quality_bam_input', sa.Float(), nullable=True),
    sa.Column('data_Quality_uniq_bam', sa.Float(), nullable=True),
    sa.Column('data_Quality_uniq_nodup_bam', sa.Float(), nullable=True),
    sa.Column('data_Quality_uniq_nodup_bam_input', sa.Float(), nullable=True),
    sa.Column('coverage', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.Column('sequence_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['sequence_id'], ['sequence.id'], name=op.f('fk_results_sequence_id_sequence')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_results'))
    )
    with op.batch_alter_table('results', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_results_timestamp'), ['timestamp'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('results', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_results_timestamp'))

    op.drop_table('results')
    with op.batch_alter_table('sequence', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sequence_timestamp'))

    op.drop_table('sequence')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('diseases', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_diseases_timestamp'))

    op.drop_table('diseases')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_default'))

    op.drop_table('roles')
    with op.batch_alter_table('patients', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_patients_timestamp'))

    op.drop_table('patients')
    # ### end Alembic commands ###
